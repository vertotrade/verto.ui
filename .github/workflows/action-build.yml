name: Builds Frontend
on:
  workflow_call:
    # Required inputs
    inputs:
      env:
        required: true
        type: string
      domain:
        required: true
        type: string
      assets_domain:
        required: true
        type: string
      is_protected:
        required: false
        type: boolean
        default: false
  workflow_dispatch:
jobs:
  build-frontend: 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout üõéÔ∏è
        # Checkout code from repository
        uses: actions/checkout@v3

      - name: Cache node modules
        # Restores the build from cache to speed up build process
        uses: actions/cache@v3
        id: cache-node-modules
        env:
          cache-name: cache-node-modules
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ env.cache-name }}-${{ github.sha }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install
        run: yarn

      - name: Build application
        run: yarn build

      - name: Move files to build folder
        env:
          DOMAIN: ${{ inputs.domain }}
          ASSETS_DOMAIN: ${{ inputs.assets_domain }}
          IS_PROTECTED: ${{ inputs.is_protected }}
        # Moved files are used in Docker build
        run: |
          if [ "${{ inputs.env }}" == "dev" ]; then
            mv apps/web/.env.development .env.production
          else
            mv apps/web/.env.production .env.production
          fi

          mkdir build
          mkdir build/_next
          mv apps/web/.next/standalone build/standalone
          mv apps/web/.next/static build/_next/static
          mv apps/web/public build/public
          cp .env.production build/.env.production

          if [[ "$IS_PROTECTED" == "true" ]]; then export IS_PROTECTED="auth_basic \"VertoTrade\"; auth_basic_user_file /app/.htpasswd;"; else export IS_PROTECTED=""; fi
          envsubst '\$DOMAIN \$ASSETS_DOMAIN \$IS_PROTECTED' < apps/web/nginx.conf > nginx.conf
          cat nginx.conf
          mv apps/web/.htpasswd .

      - name: Cache build
        # Caches the built image for future builds
        uses: actions/cache@v3
        env:
          cache-name: cache-build-${{ github.run_id }}
        with:
          path: |
            ./node_modules
            ./build
            ./nginx.conf
            ./.htpasswd
          key: build-${{ github.run_id }}
          restore-keys: build-${{ github.run_id }}

      - name: Create al upload-build folder
        # Creates a folder to upload to artifact
        shell: bash
        run: |
          cp -r build upload-build

      - name: Remove node_modules from the build
        # Removes files not needed for the assets.
        shell: bash
        run: |
          echo "excmd rm -rf upload-build/standalone"
          rm -rf upload-build/node_modules

      #  Uploads the upload-build to artifact
      - name: Upload build
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: upload-build