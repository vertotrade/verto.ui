# Pushes a Docker Image to ECR
name: Pushes a Docker Image to ECR
on:
  workflow_call:
    # Defines the inputs for the workflow
    inputs:
      aws_region:
        required: false
        type: string
        default: us-east-1
      ecr_repo:
        required: true
        type: string
      ecr_repo_second:
        required: true
        type: string
      build_number:
        required: true
        type: string
        # Defines the secrets used by the workflow
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
jobs:
  publish:
    runs-on: ubuntu-latest
    # Defines the outputs of the job
    outputs:
      image_name: ${{ steps.push.outputs.image_name }}
    steps:
      - name: Checkout 🛎️
        # Checkout the code repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        # Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        # Configure the AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ inputs.aws_region }}

      - name: Login to Amazon ECR
        # Logs into the Amazon ECR registry
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Restore cached docker image
        # Restores the Docker image from a cache 'if available
        uses: actions/cache@v3
        env:
          cache-name: cache-${{ inputs.ecr_repo }}-${{ github.run_id }}
        with:
          path: /tmp/${{ inputs.ecr_repo }}.tar
          key: ${{ inputs.ecr_repo }}-${{ github.run_id }}
          restore-keys: ${{ inputs.ecr_repo }}-${{ github.run_id }}

      - name: Load Docker image
        # Loads, tags, and lists a Docker image using the Docker CLI
        env:
          ECR_REPO: ${{ inputs.ecr_repo }}
        run: |
          docker load --input /tmp/${ECR_REPO}.tar
          export IMAGE_NAME="${{ steps.login-ecr.outputs.registry }}/${ECR_REPO}:${{ inputs.build_number }}"
          export IMAGE_NAME_LATEST="${{ steps.login-ecr.outputs.registry }}/${ECR_REPO}:latest"
          docker tag ${ECR_REPO}:latest ${IMAGE_NAME}
          docker tag ${IMAGE_NAME} ${IMAGE_NAME_LATEST}
          docker image ls -a

      - name: Push
        # Pushed the docker image
        id: push
        run: |
          export IMAGE_NAME="${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecr_repo }}"
          docker push "${IMAGE_NAME}:${{ inputs.build_number }}"
          docker push "${IMAGE_NAME}:latest"
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Tag and push to second ECR
        env:
          ECR_REPO: ${{ inputs.ecr_repo }}
          ECR_REPO_SECOND: ${{ inputs.ecr_repo_second }}
        run: |
          export IMAGE_NAME_SECOND="${{ steps.login-ecr.outputs.registry }}/${ECR_REPO_SECOND}:${{ inputs.build_number }}"
          export IMAGE_NAME_LATEST_SECOND="${{ steps.login-ecr.outputs.registry }}/${ECR_REPO_SECOND}:latest"
          docker tag ${ECR_REPO}:latest ${IMAGE_NAME_SECOND}
          docker tag ${IMAGE_NAME_SECOND} ${IMAGE_NAME_LATEST_SECOND}
          docker image ls -a

      - name: Push to second ECR
        env:
          ECR_REPO_SECOND: ${{ inputs.ecr_repo_second }}
        run: |
          export IMAGE_NAME_SECOND="${{ steps.login-ecr.outputs.registry }}/${ECR_REPO_SECOND}:${{ inputs.build_number }}"
          docker push "${IMAGE_NAME_SECOND}"
          docker push "${{ steps.login-ecr.outputs.registry }}/${ECR_REPO_SECOND}:latest"
